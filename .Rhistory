---
title: "My first test report"
author: "Zafarali Bazarov"
date: '2022-05-04'
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
blyton <- 5 # blyton is a varibale
blyton
# These functions/variables are mis-spelled and
# cannot be found in the global environament:
Sqrt(25)
Blyton
11 - blyton
class(x)
class(x)
x <- "Joybrato Mukherjee"
class(x)
class(x)
x = "Joybrato Mukherjee"
x = "Joybrato Mukherjee"
class(x)
chain <- c(1,2,3,4,5)
chain-1
chain-chain
chain^2
sqrt(chain)
five.friends <- c("Geroge", "Julian", "Richard", "Anne", "Tim")
five.friends[3]
abc <- matrix(c("a", "b", "c", "d",
"e", "f", "g", "h"),  # data
nrow=2,                 # number of rows
byrow = T)              # data are ordered row-wise
abc <- matrix(c("a", "b", "c", "d",
"e", "f", "g", "h"),  # data
nrow=2,                 # number of rows
byrow = T)              # data are ordered row-wise
abc
abc <- matrix(c("a", "b", "c", "d",
"e", "f", "g", "h"),  # data
nrow=2,                 # number of rows
byrow = T)              # data are ordered row-wise
abc
abc2
abc2 <- matrix(c("a", "b", "c", "d",
"e", "f", "g", "h"),
nrow=4,
byrow = T)
abc2
abc[2,3]           # element in secont row, third column
abc[2,3]           # element in secont row, third column
abc[2,]            # whole secont row
abc[,3]
abc.123 <- matric(c("a", "b", "c",
1, 2, 3,),
nrow=2,
byrow=T)
abc.123
bc.123 <- matrix(c("a", "b", "c",
1, 2, 3,),
nrow=2,
byrow=T)
abc.123
abc.123 <- matrix(c("a", "b", "c",
1, 2, 3,),
nrow=2,
byrow=T)
abc.123
# Vectors and matrices contain either number or character elements:
abc.123 <- matrix(c("a", "b", "c",
1,   2,   3,),
nrow=2,
byrow=T)
# Vectors and matrices contain either number or character elements:
abc.123 <- matrix(c("a", "b", "c",
1,   2,   3),
nrow=2,
byrow=T)
abc.123 <- matrix(c("a", "b", "c",
1,   2,   3),
nrow=2,
byrow=T)
abc.123
fieldtrial <- data.frame(
plot         = c(1,  2,  3,  4,  5,  6,  7,  8,  9,  10,  11,  12),
variety      = c(1,  1,  1,  1,  1,  1,  2,  2,  2,   2,   2,   2),
fertilizer   = c("N","N","N","NK","NK","NK","NK","NK","NK","NK","NK","NK"),
rep          = c(1,  2,  3,  1,  2,  3,  1,  2,  3,   1,   2,   3),
yield        = c(80, 90, 95, 95, 100, 93, 88, 102, 92, 100, 110, 103))
fieldtrial
str(fieldtrial)
fieldtrial$yield
fieldtrial[, "yield"]
fieldtrial[,5]
fieldtrial[3,]
View(abc)
write.table(fieldtrial, "fieldtrial.txt")    # write into txt file
ft<- read.table("fieldtrial.txt")           # read from txt file
ft
read.table(fieldtrial.txt")
ft
read.table(fieldtrial.txt")
ft
write.table(fieldtrial, "fieldtrial.xlsx")
ft<- read.table("fieldtrial.xlsx")
ft
read.table(fieldtrial.xlsx")
read.table(fieldtrial.csv")
write.table(fieldtrial, "fieldtrial.csv")    # write into txt file
ft<- read.table("fieldtrial.csv")           # read from txt file
ft
read.table(fieldtrial.csv")
library(readr)
fieldtrial <- read_csv("fieldtrial.csv")
View(fieldtrial)
ft2 <- read.table(file="fieldtrial.csv",  # name of input file
dec = ",",              # decimal separator
sep = ";",              # separator between values
header = T)             # data have headers
ft2
ft2 <- read.table(file="fieldtrial2.csv",  # name of input file
dec = ",",              # decimal separator
sep = ";",              # separator between values
header = T)             # data have headers
ft2
ft2 <- read.table(file="fieldtrial.csv",  # name of input file
dec = ",",              # decimal separator
sep = ";",              # separator between values
header = T)             # data have headers
ft2
ft2
write.table(fieldtrial, "fieldtrial.txt")    # write into txt file
ft<- read.table("fieldtrial.txt")           # read from txt file
ft
read.table("fieldtrial.txt")
read.table("fieldtrial.csv")
write.table(fieldtrial, "fieldtrial.csv")    # write into txt file
ft<- read.table("fieldtrial.csv")           # read from txt file
ft
read.table("fieldtrial.csv")
View(ft2)
View(ft)
View(ft)
View(ft)
library(readxl)
dataset <- read_excel(NULL)
View(dataset)
library(readr)
fieldtrial <- read_csv("fieldtrial.csv")
View(fieldtrial)
load("D:/jlu box/2_JLU Giessen/Modules/2022-2023_WS/Applied statistics/R_tutorial/1-Single factor analysis of variance_Video tutorials/fP2.RData")
load("D:/jlu box/2_JLU Giessen/Modules/2022-2023_WS/Applied statistics/R_tutorial/1-Single factor analysis of variance_Video tutorials/firstProject.RData")
clearPushBack()
amount<- c(18, 19, 16, 17,  14, 12, 13, 15,  16, 14, 15, 15)
gl(n=3, k=1, length = 3*4, labels = c("MineralN", "Straw", "CoverCrop"))
annualCrop <- data.frame(fertilizer=fertilizerType,
yield = amount)
fertilizerType <- gl(n=3, k=1, length = 3*4, labels = c("MineralN", "Straw", "CoverCrop"))
r
annualCrop <- data.frame(fertilizer=fertilizerType,
yield = amount)
View(annualCrop)
fertilizerType2 <- factor( c( rep("MineralN", times=4, rep("Straw", times=4,
rep("CoverCrop", times=4)))))
fertilizerType2 <- factor( c( rep("MineralN", times=4, rep("Straw", times=4,
rep("CoverCrop", times=4)))))
annualCrop2<- data.frame(fertilizer=fertilizerType2,
yield = amount)
View(annualCrop2)
fertilizerType2 <- factor( c( rep("MineralN", times=4), rep("Straw", times=4,
rep("CoverCrop", times=4)))))
rep("CoverCrop", times=4) ))
fertilizerType2 <- factor( c( rep("MineralN", times=4), rep("Straw", times=4),
rep("CoverCrop", times=4) ))
annualCrop2<- data.frame(fertilizer=fertilizerType2,
yield = amount)
View(annualCrop2)
attach(annualCrop2)
boxplot(yield ~ fertilizer)
boxplot(yield ~ fertilizer,
range=2,
data=annualCrop2)
boxplot(yield ~ fertilizer,
range=2,
data=annualCrop2)
boxplot(yield ~ fertilizer,
range=2,
data=annualCrop2)
# axis descriptions: bltr
boxplot (yield ~ fertlizer, # Model
ylab="Yield [kg]", # Label for y axis
xlab="Type of fertilizer", # Label for x axis
col ="lightblue", # Color of boxes
)
# axis descriptions: bltr
boxplot (yield ~ fertlizer, # Model
ylab="Yield [kg]", # Label for y axis
xlab="Type of fertilizer", # Label for x axis
col ="lightblue", # Color of boxes
data = annualCrop2)
par ( mar=c(4,4,1,1) ) # No. of lines around the plot for
(yield ~ fertlizer, # Model
ylab="Yield [kg]", # Label for y axis
xlab="Type of fertilizer", # Label for x axis
col ="lightblue", # Color of boxes
data = annualCrop2)
# we do not have neccesary part of R
library("dplyr") # Provides: summarise
detach(annualCrop2)
# we do not have neccesary part of R
library("dplyr") # Provides: summarise
# axis descriptions: bltr
boxplot (yield ~ fertlizer, # Model
ylab="Yield [kg]", # Label for y axis
xlab="Type of fertilizer", # Label for x axis
col ="lightblue", # Color of boxes
data = annualCrop2)
# axis descriptions: bltr
boxplot (yield ~ fertilizer, # Model
ylab="Yield [kg]", # Label for y axis
xlab="Type of fertilizer", # Label for x axis
col ="lightblue", # Color of boxes
data = annualCrop2)
View(annualCrop2)
View(annualCrop2)
# we will attach this data to R.
attach(annualCrop2)
summary.aov(yield ~ fertilizer)
summary( aov(yield ~ fertilizer))
skripchat(yield~ fertilizer,
method="jitter",
vertical=T)
skripchart( yield~ fertilizer,
method="jitter",
vertical=T)
stripchart( yield~ fertilizer,
method="jitter",
vertical=T)
summary( aov(yield ~ fertilizer))
bartlett.test ( absorption ~ fattype )
amount <- c ( 64, 72, 68, 77, 56, 95,  # Aldi
78, 91, 97, 82, 85, 77,  # Lidl
75, 93, 78, 71, 63, 76,  # Mazaola
55, 66, 49, 64, 70, 68)  # Palmin
type2 <- factor( c( rep("Aldi", times=6), rep("Lidl", times=6),
rep("Mazaola", times=6), rep("Palmin", times=6)))
production2 <- data.frame(fattype=type2,
absorption=amount)
boxplot( absorption ~ fattype,
range = 0,
data = doughnutData)
doughnutData <- data.frame(fattype=type2,
absorption=amount)
boxplot( absorption ~ fattype,
range = 0,
data = doughnutData)
stripchart(absorption  ~ fattype,
data=doughnutData,
main="The stripchart for the absorption rate of the fat types",
xlab="The type of fat",
ylab="Absorbtion rate (g)",
col="brown3",
group.names=c( "Aldi", "Lidl", "Mazaola", "Palmin"),
vertical=TRUE,
pch=19 )
doughnutData %>% group_by (fattype) %>%
summarise (n=n(), mean= mena(absorption),
var = var(absorption), min=min(absorption), max= max(absorption)
)
doughnutData %>% group_by (fattype) %>%
summarise (n=n(), mean= mena(absorption),
var = var(absorption), min=min(absorption), max= max(absorption)
)
bartlett.test ( absorption ~ fattype )
bartlett.test ( absorption ~ fattype )
mean(absorption)
production2 <- data.frame(fattype=type2,
absorption=amount)
doughnutData <- data.frame(fattype=type2,
absorption=amount)
boxplot( absorption ~ fattype,
range = 0,
data = doughnutData)
doughnutData %>% group_by (fattype) %>%
summarise (n=n(), mean= mena(absorption),
var = var(absorption), min=min(absorption), max= max(absorption)
)
bartlett.test ( absorption ~ fattype )
library("lme4"); library("emmeans");
library("multcomp"); library("multcompView")
options ( contrasts = c("contr.sum","contr.sum") )
setwd("D:/jlu box/2_JLU Giessen/Modules/2022-2023_WS/Applied statistics/Exercises/3 Balanced multi-factor ANOVA")
raps <- read.table ( "v14-u31-06.csv", header=T, sep=";", dec=",",
stringsAsFactors = T )
str(raps)
raps$G <- as.fixed(raps$geno)
library("GAD" ) # Provides: gad, as.fixed, as.random, estimates
raps$G <- as.fixed(raps$geno)
raps$E <- as.fixed(raps$env)
raps$R <- as.random(raps$rep)
m <- lm ( hgt ~ G*E + E:R , data=raps )
gad (m)
estimates(m)
gad (m)
model.tables(aov(m),"means",cterms="G")
snk.test(m,term =’G’)
snk.test(m,term ='G'')
snk.test(m,term ='G')
snk.test(m,term ="G")
# sed
sed <- sqrt(2) * 2.345; dfe <- 76; alpha <- 0.05
( lsd <- sed * qt( 1-alpha/2,dfe ) )
model.tables(aov(m),"means",cterms="G:E")
snk.test(m,term ='G:E', among ='E', within ='G')
sed <- sqrt(2)* 3.3163; dfe <- 76; alpha <- 0.05
( lsd <- sed * qt( 1-alpha/2,dfe ) )
View(raps)
